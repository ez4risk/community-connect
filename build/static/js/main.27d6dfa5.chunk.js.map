{"version":3,"sources":["server/firebase.js","components/SideBar/UserInfo/UserInfo.component.jsx","store/actioncreator.js","store/actiontypes.js","components/SideBar/Channels/Channels.component.jsx","components/SideBar/Notification/Notification.component.jsx","components/SideBar/PrivateChat/PrivateChat.component.jsx","components/SideBar/FavouriteChannels/FavouriteChannels.component.jsx","components/SideBar/SideBar.component.jsx","components/Messages/MessageHeader/MessageHeader.component.jsx","components/Messages/MessageContent/MessageContent.component.jsx","components/Messages/ImageUpload/ImageUpload.component.jsx","components/Messages/MessageInput/MessageInput.component.jsx","components/Messages/Messages.component.jsx","App.js","serviceWorker.js","components/Auth/Register/Register.component.jsx","components/Auth/Login/Login.component.jsx","store/reducer.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","connect","state","user","currentUser","props","signOut","auth","then","console","log","Grid","Column","Row","className","Header","inverted","as","Icon","name","Content","Dropdown","trigger","Image","src","photoURL","avatar","displayName","options","key","text","onClick","setChannel","channel","type","payload","currentChannel","dispatch","selectChannel","useState","modalOpenState","setModalOpenState","description","channelAddState","setChannelAddState","isLoadingState","setLoadingState","channelsState","setChannelsState","channelsRef","database","ref","usersRef","useEffect","on","snap","currentState","updatedState","push","val","off","length","closeModal","setLastVisited","lastVisited","child","uid","id","set","ServerValue","TIMESTAMP","onDisconnect","onSubmit","created_by","update","catch","err","handleInput","e","target","value","Menu","style","marginTop","Item","fontSize","map","active","isFavourite","displayChannels","Modal","open","onClose","Form","Segment","stacked","Input","onChange","placeholder","Actions","Button","loading","Notification","messagesRef","channelsVisitedState","setChannelsVisitedState","messagesTimeStampState","setMessagesTimeStampState","messages","channelsId","Object","keys","messagesTimeStamp","forEach","channelId","reduce","agg","item","timestamp","channelMessagesTimeStamp","notificationCount","filter","Label","color","calculateNotificationCount","notificationChannelId","usersState","setUsersState","connectedUsersState","setConnectedUsersState","connectedRef","statusRef","isPrivateChat","userStatusRef","remove","index","indexOf","splice","selectUser","userTemp","generateChannelId","userId","displayUsers","favouriteChannels","favouriteChannel","SideBar","vertical","fixed","borderless","size","MessageHeader","clearing","floated","fluid","channelName","starChange","starred","Subheader","uniqueUsers","icon","searchTermChange","TimeAgo","locale","en","timeAgo","MessageContent","Comment","Avatar","message","ownMessage","Author","Metadata","format","image","onLoad","imageLoaded","Text","content","ImageUpload","fileState","setFileState","acceptedTypes","basic","file","files","label","includes","mime","lookup","uploadImage","messageRef","storageRef","storage","messageState","setMessageState","fileDialogState","setFileDialog","sendMessage","downloadUrl","createMessageInfo","labelPosition","contentType","filePath","uuidv4","put","data","getDownloadURL","url","setfavouriteChannel","removefavouriteChannel","messagesState","setMessagesState","searchTermState","setSearchTermState","divRef","useRef","scrollIntoView","behavior","filterMessageBySearchTerm","regex","RegExp","acc","match","isStarred","favouriteRef","Group","messagesToDisplay","displayMessages","currentEl","App","columns","width","Boolean","window","location","hostname","Register","userCollectionRef","userName","email","password","confirmpassword","userState","setuserState","errorState","seterrorState","isLoading","setIsLoading","isSuccess","setIsSuccess","event","currentuser","isFormEmpty","checkPassword","error","concat","updateuserDetails","createdUser","updateProfile","saveUserInDB","serverError","verticalAlign","textAlign","maxWidth","createUserWithEmailAndPassword","iconPosition","disabled","Message","success","to","Login","signInWithEmailAndPassword","defaultUserState","defaultChannelState","defaultFavouriteChannelState","combinedReducers","combineReducers","action","store","createStore","IndexWithRouter","withRouter","setUser","onAuthStateChanged","history","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.27d6dfa5.chunk.js","sourcesContent":["import firebase from \"firebase/compat/app\";\nimport \"firebase/compat/auth\";\nimport \"firebase/compat/storage\";\nimport \"firebase/compat/database\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCwL1qFBuhKlsg999QQBfRmyKgsy0oal_I\",\n  authDomain: \"community-talks.firebaseapp.com\",\n  databaseURL:\n    \"https://community-talks-default-rtdb.asia-southeast1.firebasedatabase.app/\",\n  projectId: \"community-talks\",\n  storageBucket: \"community-talks.appspot.com\",\n  messagingSenderId: \"459409942678\",\n  appId: \"1:459409942678:web:8f6bb36fc860afc35d3ab7\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React from \"react\";\nimport { Grid, Header, Icon, Image, Dropdown } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport firebase from \"../../../server/firebase\";\n\nimport \"./UserInfo.css\";\n\nconst UserInfo = (props) => {\n  const getDropDownOptions = () => {\n    return [\n      {\n        key: \"signout\",\n        text: <span onClick={signOut}>Sign Out</span>,\n      },\n    ];\n  };\n\n  const signOut = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => console.log(\"user signed out\"));\n  };\n\n  if (props.user) {\n    return (\n      <Grid>\n        <Grid.Column>\n          <Grid.Row className=\"userinfo_grid_row\">\n            <Header inverted as=\"h2\">\n              <Icon name=\"connectdevelop\" />\n              <Header.Content>Community Connect</Header.Content>\n            </Header>\n            <Header className=\"userinfo_displayname\" inverted as=\"h4\">\n              <Dropdown\n                trigger={\n                  <span>\n                    <Image src={props.user.photoURL} avatar></Image>\n                    {props.user.displayName}\n                  </span>\n                }\n                options={getDropDownOptions()}\n              ></Dropdown>\n            </Header>\n          </Grid.Row>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n  return null;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user.currentUser,\n  };\n};\n\nexport default connect(mapStateToProps)(UserInfo);\n","import { SET_USER, SET_CHANNEL ,SET_FAVOURITECHANNEL,REMOVE_FAVOURITECHANNEL} from './actiontypes';\n\nexport const setUser = (user) => {\n    return {\n        type: SET_USER,\n        payload: {\n            currentUser: user\n        }\n    }\n}\n\nexport const setChannel = (channel) => {\n    return {\n        type: SET_CHANNEL,\n        payload: {\n            currentChannel: channel\n        }\n    }\n}\n\nexport const setfavouriteChannel = (channel) => {\n    return {\n        type: SET_FAVOURITECHANNEL,\n        payload: {\n            favouriteChannel: channel\n        }\n    }\n}\n\nexport const removefavouriteChannel = (channel) => {\n    return {\n        type: REMOVE_FAVOURITECHANNEL,\n        payload: {\n            favouriteChannel: channel\n        }\n    }\n}","export const SET_USER = 'SET_USER'\n\nexport const SET_CHANNEL = 'SET_CHANNEL'\n\nexport const SET_FAVOURITECHANNEL = 'SET_FAVOURITECHANNEL'\n\nexport const REMOVE_FAVOURITECHANNEL = 'REMOVE_FAVOURITECHANNEL'","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport firebase from \"../../../server/firebase\";\nimport { setChannel } from \"../../../store/actioncreator\";\n\nimport \"./Channels.css\";\nimport { Menu, Icon, Modal, Button, Form, Segment } from \"semantic-ui-react\";\n\nconst Channels = (props) => {\n  const [modalOpenState, setModalOpenState] = useState(false);\n  const [channelAddState, setChannelAddState] = useState({\n    name: \"\",\n    description: \"\",\n  });\n  const [isLoadingState, setLoadingState] = useState(false);\n  const [channelsState, setChannelsState] = useState([]);\n\n  const channelsRef = firebase.database().ref(\"channels\");\n  const usersRef = firebase.database().ref(\"users\");\n\n  useEffect(() => {\n    channelsRef.on(\"child_added\", (snap) => {\n      setChannelsState((currentState) => {\n        let updatedState = [...currentState];\n        updatedState.push(snap.val());\n        return updatedState;\n      });\n    });\n\n    return () => channelsRef.off();\n  }, []);\n\n  useEffect(() => {\n    if (channelsState.length > 0) {\n      props.selectChannel(channelsState[0]);\n    }\n  }, [!props.channel ? channelsState : null]);\n\n  const openModal = () => {\n    setModalOpenState(true);\n  };\n\n  const closeModal = () => {\n    setModalOpenState(false);\n  };\n\n  const checkIfFormValid = () => {\n    return (\n      channelAddState && channelAddState.name && channelAddState.description\n    );\n  };\n\n  const displayChannels = () => {\n    if (channelsState.length > 0) {\n      return channelsState.map((channel) => {\n        return (\n          <Menu.Item\n            key={channel.id}\n            name={channel.name}\n            onClick={() => selectChannel(channel)}\n            active={\n              props.channel &&\n              channel.id === props.channel.id &&\n              !props.channel.isFavourite\n            }\n          >\n            {\"# \" + channel.name}\n          </Menu.Item>\n        );\n      });\n    }\n  };\n\n  const selectChannel = (channel) => {\n    setLastVisited(props.user, props.channel);\n    setLastVisited(props.user, channel);\n    props.selectChannel(channel);\n  };\n\n  const setLastVisited = (user, channel) => {\n    const lastVisited = usersRef\n      .child(user.uid)\n      .child(\"lastVisited\")\n      .child(channel.id);\n    lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n    lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n  };\n\n  const onSubmit = () => {\n    if (!checkIfFormValid()) {\n      return;\n    }\n\n    const key = channelsRef.push().key;\n\n    const channel = {\n      id: key,\n      name: channelAddState.name,\n      description: channelAddState.description,\n      created_by: {\n        name: props.user.displayName,\n        avatar: props.user.photoURL,\n      },\n    };\n    setLoadingState(true);\n    channelsRef\n      .child(key)\n      .update(channel)\n      .then(() => {\n        setChannelAddState({ name: \"\", description: \"\" });\n        setLoadingState(false);\n        closeModal();\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const handleInput = (e) => {\n    let target = e.target;\n    setChannelAddState((currentState) => {\n      let updatedState = { ...currentState };\n      updatedState[target.name] = target.value;\n      return updatedState;\n    });\n  };\n\n  return (\n    <>\n      {\" \"}\n      <Menu.Menu style={{ marginTop: \"35px\" }}>\n        <Menu.Item style={{ fontSize: \"17px\" }}>\n          <span>\n            <Icon name=\"chat\" /> Hangouts\n          </span>\n          ({channelsState.length})\n        </Menu.Item>\n        {displayChannels()}\n        <Menu.Item>\n          <span className=\"clickable\" onClick={openModal}>\n            <Icon name=\"add\" /> ADD\n          </span>\n        </Menu.Item>\n      </Menu.Menu>\n      <Modal open={modalOpenState} onClose={closeModal}>\n        <Modal.Header>New Hangout</Modal.Header>\n        <Modal.Content>\n          <Form onSubmit={onSubmit}>\n            <Segment stacked>\n              <Form.Input\n                name=\"name\"\n                value={channelAddState.name}\n                onChange={handleInput}\n                type=\"text\"\n                placeholder=\"Enter Channel Name\"\n              />\n              <Form.Input\n                name=\"description\"\n                value={channelAddState.description}\n                onChange={handleInput}\n                type=\"text\"\n                placeholder=\"Enter Channel Description\"\n              />\n            </Segment>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button loading={isLoadingState} onClick={onSubmit}>\n            <Icon name=\"checkmark\" /> Create\n          </Button>\n          <Button onClick={closeModal}>\n            <Icon name=\"remove\" /> Cancel\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user.currentUser,\n    channel: state.channel.currentChannel,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    selectChannel: (channel) => dispatch(setChannel(channel)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Channels);\n","import React, { useState, useEffect } from 'react';\nimport { Label } from 'semantic-ui-react';\n\nimport firebase from \"../../../server/firebase\";\n\nexport const Notification = (props) => {\n\n    const messagesRef = firebase.database().ref(\"messages\");\n\n    const usersRef = firebase.database().ref(\"users\");\n\n    const [channelsVisitedState, setChannelsVisitedState] = useState({});\n\n\n    const [messagesTimeStampState, setMessagesTimeStampState] = useState({});\n\n\n    useEffect(() => {\n\n        if (props.user) {\n            usersRef.child(props.user.uid).child('lastVisited').on('value', snap => {\n                setChannelsVisitedState(snap.val());\n            })\n\n            messagesRef.on('value', snap => {\n                let messages = snap.val();\n\n                let channelsId = Object.keys(messages);\n                let messagesTimeStamp = {};\n                channelsId.forEach((channelId) => {\n                    let channelMessageKeys = Object.keys(messages[channelId]);\n                    channelMessageKeys.reduce((agg, item) => {\n                        messagesTimeStamp[channelId] = [...messagesTimeStamp[channelId] || []];\n                        messagesTimeStamp[channelId].push(messages[channelId][item].timestamp);\n                    })\n                })\n                setMessagesTimeStampState(messagesTimeStamp);\n            })\n        }\n    }, [props.user]);\n\n    const calculateNotificationCount = (channelId) => {\n\n        if (channelsVisitedState && messagesTimeStampState && props.channel && props.channel.id !== channelId) {\n\n            let lastVisited = channelsVisitedState[channelId];\n\n            let channelMessagesTimeStamp = messagesTimeStampState[channelId];\n\n            if (channelMessagesTimeStamp) {\n                let notificationCount = channelMessagesTimeStamp.filter(timestamp => !lastVisited || lastVisited < timestamp).length;\n                return notificationCount === 0 ? null : <Label color=\"red\">{notificationCount}</Label>\n            }\n        }\n\n        return null;\n    }\n\n    return <> {props.displayName}{calculateNotificationCount(props.notificationChannelId)} </>;\n\n}","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport firebase from \"../../../server/firebase\";\nimport { setChannel } from \"../../../store/actioncreator\";\nimport { Notification } from \"../Notification/Notification.component\";\n\nimport { Menu, Icon } from \"semantic-ui-react\";\n\nconst PrivateChat = (props) => {\n  const [usersState, setUsersState] = useState([]);\n\n  const [connectedUsersState, setConnectedUsersState] = useState([]);\n\n  const usersRef = firebase.database().ref(\"users\");\n\n  const connectedRef = firebase.database().ref(\".info/connected\");\n\n  const statusRef = firebase.database().ref(\"status\");\n\n  useEffect(() => {\n    usersRef.on(\"child_added\", (snap) => {\n      setUsersState((currentState) => {\n        let updatedState = [...currentState];\n\n        let user = snap.val();\n        user.name = user.displayName;\n        user.id = snap.key;\n        user.isPrivateChat = true;\n        updatedState.push(user);\n\n        return updatedState;\n      });\n    });\n\n    connectedRef.on(\"value\", (snap) => {\n      if (props.user && snap.val()) {\n        const userStatusRef = statusRef.child(props.user.uid);\n        userStatusRef.set(true);\n        userStatusRef.onDisconnect().remove();\n      }\n    });\n\n    return () => {\n      usersRef.off();\n      connectedRef.off();\n    };\n  }, [props.user]);\n\n  useEffect(() => {\n    statusRef.on(\"child_added\", (snap) => {\n      setConnectedUsersState((currentState) => {\n        let updatedState = [...currentState];\n        updatedState.push(snap.key);\n        return updatedState;\n      });\n    });\n\n    statusRef.on(\"child_removed\", (snap) => {\n      setConnectedUsersState((currentState) => {\n        let updatedState = [...currentState];\n\n        let index = updatedState.indexOf(snap.key);\n        updatedState.splice(index, 1);\n        return updatedState;\n      });\n    });\n\n    return () => statusRef.off();\n  }, [usersState]);\n\n  const displayUsers = () => {\n    if (usersState.length > 0) {\n      return usersState\n        .filter((user) => user.id !== props.user.uid)\n        .map((user) => {\n          return (\n            <Menu.Item\n              key={user.id}\n              name={user.name}\n              onClick={() => selectUser(user)}\n              active={\n                props.channel && generateChannelId(user.id) === props.channel.id\n              }\n            >\n              <Icon\n                name=\"circle\"\n                color={`${\n                  connectedUsersState.indexOf(user.id) !== -1 ? \"green\" : \"red\"\n                }`}\n              />\n\n              <Notification\n                user={props.user}\n                channel={props.channel}\n                notificationChannelId={generateChannelId(user.id)}\n                displayName={\"@ \" + user.name}\n              />\n            </Menu.Item>\n          );\n        });\n    }\n  };\n\n  const selectUser = (user) => {\n    let userTemp = { ...user };\n    userTemp.id = generateChannelId(user.id);\n    setLastVisited(props.user, props.channel);\n    setLastVisited(props.user, userTemp);\n    props.selectChannel(userTemp);\n  };\n\n  const setLastVisited = (user, channel) => {\n    const lastVisited = usersRef\n      .child(user.uid)\n      .child(\"lastVisited\")\n      .child(channel.id);\n    lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n    lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n  };\n\n  const generateChannelId = (userId) => {\n    if (props.user.uid < userId) {\n      return props.user.uid + userId;\n    } else {\n      return userId + props.user.uid;\n    }\n  };\n\n  return (\n    <Menu.Menu style={{ marginTop: \"35px\" }}>\n      <Menu.Item style={{ fontSize: \"17px\" }}>\n        <span>\n          <Icon name=\"mail\" /> Private Chat\n        </span>\n        ({usersState.length - 1})\n      </Menu.Item>\n      {displayUsers()}\n    </Menu.Menu>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user.currentUser,\n    channel: state.channel.currentChannel,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    selectChannel: (channel) => dispatch(setChannel(channel)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateChat);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { setChannel } from \"../../../store/actioncreator\";\n\nimport { Menu, Icon } from \"semantic-ui-react\";\n\nconst FavouriteChannels = (props) => {\n  const displayChannels = () => {\n    if (Object.keys(props.favouriteChannels).length > 0) {\n      return Object.keys(props.favouriteChannels).map((channelId) => {\n        return (\n          <Menu.Item\n            key={channelId}\n            name={props.favouriteChannels[channelId]}\n            onClick={() =>\n              props.selectChannel({\n                id: channelId,\n                name: props.favouriteChannels[channelId],\n                isFavourite: true,\n              })\n            }\n            active={\n              props.channel &&\n              channelId === props.channel.id &&\n              props.channel.isFavourite\n            }\n          >\n            {\"# \" + props.favouriteChannels[channelId]}\n          </Menu.Item>\n        );\n      });\n    }\n  };\n\n  return (\n    <Menu.Menu>\n      <Menu.Item style={{ fontSize: \"17px\" }}>\n        <span>\n          <Icon name=\"heart\" /> Favourites\n        </span>\n        ({Object.keys(props.favouriteChannels).length})\n      </Menu.Item>\n      {displayChannels()}\n    </Menu.Menu>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    channel: state.channel.currentChannel,\n    favouriteChannels: state.favouriteChannel.favouriteChannel,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    selectChannel: (channel) => dispatch(setChannel(channel)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FavouriteChannels);\n","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport UserInfo from \"./UserInfo/UserInfo.component\";\nimport Channels from \"./Channels/Channels.component\";\nimport PrivateChat from \"./PrivateChat/PrivateChat.component\";\nimport FavouriteChannels from \"./FavouriteChannels/FavouriteChannels.component\";\n\nimport \"./SideBar.css\";\n\nexport const SideBar = () => {\n    return (<Menu vertical fixed=\"left\" borderless size=\"large\" className=\"side_bar\">\n        <UserInfo />\n        <FavouriteChannels />\n        <Channels />\n        <PrivateChat />\n    </Menu>\n    )\n}","import React from 'react';\nimport { Segment, Header, Input, Icon } from 'semantic-ui-react';\n\nconst MessageHeader = (props) => {\n    return <Segment clearing>\n        <Header floated=\"left\" fluid=\"true\" as=\"h2\">\n            <span>\n                {(props.isPrivateChat ? \"@ \" : \"# \") + props.channelName}\n                {!props.isPrivateChat && <Icon\n                    onClick={props.starChange}\n                    name={props.starred ? \"star\" : \"star outline\"}\n                    color={props.starred ? \"yellow\" : \"black\"} />}\n            </span>\n            <Header.Subheader> {props.uniqueUsers} User{props.uniqueUsers === 1 ? \"\" : \"s\"}</Header.Subheader>\n        </Header>\n        <Header floated=\"right\">\n            <Input\n                name=\"search\"\n                icon=\"search\"\n                placeholder=\"Search Messages\"\n                size=\"mini\"\n                onChange={props.searchTermChange}\n            />\n        </Header>\n\n    </Segment>\n}\n\nexport default MessageHeader;","import React from 'react';\nimport { Comment,Image } from \"semantic-ui-react\";\nimport TimeAgo from \"javascript-time-ago\";\nimport en from \"javascript-time-ago/locale/en\";\n\nimport \"./MessageContent.css\";\n\nTimeAgo.locale(en);\n\nconst timeAgo = new TimeAgo();\n\nconst MessageContent = (props) => {\n    return <Comment>\n        <Comment.Avatar src={props.message.user.avatar} />\n        <Comment.Content className={props.ownMessage ? \"ownMessage\" : null}>\n            <Comment.Author as=\"a\">{props.message.user.name}</Comment.Author>\n            <Comment.Metadata>{timeAgo.format(props.message.timestamp)}</Comment.Metadata>\n            {props.message.image ? <Image onLoad={props.imageLoaded} src={props.message.image} /> :\n                <Comment.Text>{props.message.content}</Comment.Text>\n            }\n        </Comment.Content>\n    </Comment>\n}\n\nexport default MessageContent;","import React, { useState } from \"react\";\nimport { Input, Modal, Button, Icon } from \"semantic-ui-react\";\nimport mime from \"mime-types\";\n\nexport const ImageUpload = (props) => {\n  const [fileState, setFileState] = useState(null);\n\n  const acceptedTypes = [\"image/png\", \"image/jpeg\"];\n\n  const onFileAdded = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      setFileState(file);\n    }\n  };\n\n  const submit = () => {\n    if (fileState && acceptedTypes.includes(mime.lookup(fileState.name))) {\n      props.uploadImage(fileState, mime.lookup(fileState.name));\n      props.onClose();\n      setFileState(null);\n    }\n  };\n\n  return (\n    <Modal basic open={props.open} onClose={props.onClose}>\n      <Modal.Header>Select an image</Modal.Header>\n      <Modal.Content>\n        <Input\n          type=\"file\"\n          name=\"file\"\n          onChange={onFileAdded}\n          fluid\n          label=\"File Type (png, jpeg)\"\n        />\n      </Modal.Content>\n      <Modal.Actions>\n        <Button color=\"green\" onClick={submit}>\n          <Icon name=\"cloud upload\" />\n          Upload\n        </Button>\n        <Button color=\"red\" onClick={props.onClose}>\n          <Icon name=\"remove\" />\n          Cancel\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n};\n","import React, { useState } from 'react';\nimport { Segment, Input, Button } from \"semantic-ui-react\";\nimport firebase from \"../../../server/firebase\";\nimport { connect } from \"react-redux\";\nimport { ImageUpload } from \"../ImageUpload/ImageUpload.component\"\nimport uuidv4 from \"uuid/v4\";\n\nconst MessageInput = (props) => {\n\n    const messageRef = firebase.database().ref('messages');\n\n    const storageRef = firebase.storage().ref();\n\n    const [messageState, setMessageState] = useState(\"\");\n\n    const [fileDialogState, setFileDialog] = useState(false);\n\n    const createMessageInfo = (downloadUrl) => {\n        return {\n            user: {\n                avatar: props.user.photoURL,\n                name: props.user.displayName,\n                id: props.user.uid\n            },\n            content: messageState,\n            image : downloadUrl || \"\",\n            timestamp: firebase.database.ServerValue.TIMESTAMP\n        }\n    }\n\n    const sendMessage = (downloadUrl) => {\n        if (messageState || downloadUrl) {\n            messageRef.child(props.channel.id)\n                .push()\n                .set(createMessageInfo(downloadUrl))\n                .then(() => setMessageState(\"\"))\n                .catch((err) => console.log(err))\n        }\n    }\n\n    const onMessageChange = (e) => {\n        const target = e.target;\n        setMessageState(target.value);\n    }\n\n    const createActionButtons = () => {\n        return <>\n            <Button icon=\"send\" onClick={() => {sendMessage() }} />\n            <Button icon=\"upload\" onClick={() => setFileDialog(true)} />\n        </>\n    }\n\n    const uploadImage = (file, contentType) => {\n\n        const filePath = `chat/images/${uuidv4()}.jpg`;\n\n        storageRef.child(filePath).put(file, { contentType: contentType })\n            .then((data) => {\n                data.ref.getDownloadURL()\n                .then((url) => {\n                    sendMessage(url);\n                })\n                .catch((err) => console.log(err));\n            })\n            .catch((err) => console.log(err));\n    }\n\n    return <Segment>\n        <Input\n            onChange={onMessageChange}\n            fluid={true}\n            name=\"message\"\n            value={messageState}\n            label={createActionButtons()}\n            labelPosition=\"right\"\n        />\n        <ImageUpload uploadImage={uploadImage} open={fileDialogState} onClose={() => setFileDialog(false)} />\n    </Segment>\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user.currentUser,\n        channel: state.channel.currentChannel\n    }\n}\n\nexport default connect(mapStateToProps)(MessageInput);","import React, { useEffect, useState, useRef } from \"react\";\n\nimport MessageHeader from \"./MessageHeader/MessageHeader.component\";\nimport MessageContent from \"./MessageContent/MessageContent.component\";\nimport MessageInput from \"./MessageInput/MessageInput.component\";\nimport { connect } from \"react-redux\";\nimport {\n  setfavouriteChannel,\n  removefavouriteChannel,\n} from \"../../store/actioncreator\";\nimport firebase from \"../../server/firebase\";\nimport { Segment, Comment } from \"semantic-ui-react\";\nimport \"./Messages.css\";\n\nconst Messages = (props) => {\n  const messageRef = firebase.database().ref(\"messages\");\n\n  const usersRef = firebase.database().ref(\"users\");\n\n  const [messagesState, setMessagesState] = useState([]);\n\n  const [searchTermState, setSearchTermState] = useState(\"\");\n\n  let divRef = useRef();\n\n  useEffect(() => {\n    if (props.channel) {\n      setMessagesState([]);\n      messageRef.child(props.channel.id).on(\"child_added\", (snap) => {\n        setMessagesState((currentState) => {\n          let updatedState = [...currentState];\n          updatedState.push(snap.val());\n          return updatedState;\n        });\n      });\n\n      return () => messageRef.child(props.channel.id).off();\n    }\n  }, [props.channel]);\n\n  useEffect(() => {\n    if (props.user) {\n      usersRef\n        .child(props.user.uid)\n        .child(\"favourite\")\n        .on(\"child_added\", (snap) => {\n          props.setfavouriteChannel(snap.val());\n        });\n\n      usersRef\n        .child(props.user.uid)\n        .child(\"favourite\")\n        .on(\"child_removed\", (snap) => {\n          props.removefavouriteChannel(snap.val());\n        });\n\n      return () => usersRef.child(props.user.uid).child(\"favourite\").off();\n    }\n  }, [props.user]);\n\n  useEffect(() => {\n    divRef.scrollIntoView({ behavior: \"smooth\" });\n  }, [messagesState]);\n\n  const displayMessages = () => {\n    let messagesToDisplay = searchTermState\n      ? filterMessageBySearchTerm()\n      : messagesState;\n    if (messagesToDisplay.length > 0) {\n      return messagesToDisplay.map((message) => {\n        return (\n          <MessageContent\n            imageLoaded={imageLoaded}\n            ownMessage={message.user.id === props.user.uid}\n            key={message.timestamp}\n            message={message}\n          />\n        );\n      });\n    }\n  };\n\n  const imageLoaded = () => {\n    divRef.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const uniqueusersCount = () => {\n    const uniqueUsers = messagesState.reduce((acc, message) => {\n      if (!acc.includes(message.user.name)) {\n        acc.push(message.user.name);\n      }\n      return acc;\n    }, []);\n\n    return uniqueUsers.length;\n  };\n\n  const searchTermChange = (e) => {\n    const target = e.target;\n    setSearchTermState(target.value);\n  };\n\n  const filterMessageBySearchTerm = () => {\n    const regex = new RegExp(searchTermState, \"gi\");\n    const messages = messagesState.reduce((acc, message) => {\n      if (\n        (message.content && message.content.match(regex)) ||\n        message.user.name.match(regex)\n      ) {\n        acc.push(message);\n      }\n      return acc;\n    }, []);\n\n    return messages;\n  };\n\n  const starChange = () => {\n    let favouriteRef = usersRef\n      .child(props.user.uid)\n      .child(\"favourite\")\n      .child(props.channel.id);\n    if (isStarred()) {\n      favouriteRef.remove();\n    } else {\n      favouriteRef.set({\n        channelId: props.channel.id,\n        channelName: props.channel.name,\n      });\n    }\n  };\n\n  const isStarred = () => {\n    return Object.keys(props.favouriteChannels).includes(props.channel?.id);\n  };\n\n  return (\n    <div className=\"messages\">\n      <MessageHeader\n        starChange={starChange}\n        starred={isStarred()}\n        isPrivateChat={props.channel?.isPrivateChat}\n        searchTermChange={searchTermChange}\n        channelName={props.channel?.name}\n        uniqueUsers={uniqueusersCount()}\n      />\n      <Segment className=\"messagecontent\">\n        <Comment.Group>\n          {displayMessages()}\n          <div ref={(currentEl) => (divRef = currentEl)}></div>\n        </Comment.Group>\n      </Segment>\n      <MessageInput />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    channel: state.channel.currentChannel,\n    user: state.user.currentUser,\n    favouriteChannels: state.favouriteChannel.favouriteChannel,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setfavouriteChannel: (channel) => dispatch(setfavouriteChannel(channel)),\n    removefavouriteChannel: (channel) =>\n      dispatch(removefavouriteChannel(channel)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);\n","import React from \"react\";\nimport { SideBar } from \"./components/SideBar/SideBar.component\";\nimport Messages from \"./components/Messages/Messages.component\";\n\nimport \"./App.css\";\nimport { Grid } from \"semantic-ui-react\";\n\nfunction App() {\n  return (\n    <Grid columns=\"equal\">\n      <SideBar />\n      <Grid.Column className=\"messagepanel\">\n        <Messages />\n      </Grid.Column>\n\n      <Grid.Column width={3}>\n        <span></span>\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from \"react\";\nimport {\n  Grid,\n  Form,\n  Segment,\n  Header,\n  Icon,\n  Button,\n  Message,\n} from \"semantic-ui-react\";\nimport firebase from \"../../../server/firebase\";\n\nimport \"../Auth.css\";\nimport { Link } from \"react-router-dom\";\n\nconst Register = () => {\n  let user = {\n    userName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmpassword: \"\",\n  };\n\n  let errors = [];\n\n  let userCollectionRef = firebase.database().ref(\"users\");\n\n  const [userState, setuserState] = useState(user);\n  const [errorState, seterrorState] = useState(errors);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n\n  const handleInput = (event) => {\n    let target = event.target;\n    setuserState((currentState) => {\n      let currentuser = { ...currentState };\n      currentuser[target.name] = target.value;\n      return currentuser;\n    });\n  };\n\n  const checkForm = () => {\n    if (isFormEmpty()) {\n      seterrorState((error) =>\n        error.concat({ message: \"Please fill in all fields\" })\n      );\n      return false;\n    } else if (!checkPassword()) {\n      return false;\n    }\n    return true;\n  };\n\n  const isFormEmpty = () => {\n    return (\n      !userState.userName.length ||\n      !userState.password.length ||\n      !userState.confirmpassword.length ||\n      !userState.email.length\n    );\n  };\n\n  const checkPassword = () => {\n    if (userState.password.length < 8) {\n      seterrorState((error) =>\n        error.concat({ message: \"Password length should be greater than 8\" })\n      );\n      return false;\n    } else if (userState.password !== userState.confirmpassword) {\n      seterrorState((error) =>\n        error.concat({\n          message: \"Password and Confirm Password does not match\",\n        })\n      );\n      return false;\n    }\n    return true;\n  };\n\n  const onSubmit = (event) => {\n    seterrorState(() => []);\n    setIsSuccess(false);\n    if (checkForm()) {\n      setIsLoading(true);\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(userState.email, userState.password)\n        .then((createdUser) => {\n          setIsLoading(false);\n          updateuserDetails(createdUser);\n        })\n        .catch((serverError) => {\n          setIsLoading(false);\n          seterrorState((error) => error.concat(serverError));\n        });\n    }\n  };\n\n  const updateuserDetails = (createdUser) => {\n    if (createdUser) {\n      setIsLoading(true);\n      createdUser.user\n        .updateProfile({\n          displayName: userState.userName,\n          photoURL: `http://gravatar.com/avatar/${createdUser.user.uid}?d=identicon`,\n        })\n        .then(() => {\n          setIsLoading(false);\n          saveUserInDB(createdUser);\n        })\n        .catch((serverError) => {\n          setIsLoading(false);\n          seterrorState((error) => error.concat(serverError));\n        });\n    }\n  };\n\n  const saveUserInDB = (createdUser) => {\n    setIsLoading(true);\n    userCollectionRef\n      .child(createdUser.user.uid)\n      .set({\n        displayName: createdUser.user.displayName,\n        photoURL: createdUser.user.photoURL,\n      })\n      .then(() => {\n        setIsLoading(false);\n        setIsSuccess(true);\n      })\n      .catch((serverError) => {\n        setIsLoading(false);\n        seterrorState((error) => error.concat(serverError));\n      });\n  };\n\n  const formaterrors = () => {\n    return errorState.map((error, index) => <p key={index}>{error.message}</p>);\n  };\n\n  return (\n    <Grid verticalAlign=\"middle\" textAlign=\"center\" className=\"grid-form\">\n      <Grid.Column style={{ maxWidth: \"500px\" }}>\n        <Header icon as=\"h2\">\n          <Icon name=\"connectdevelop\" />\n          Sign Up\n        </Header>\n        <Form onSubmit={onSubmit}>\n          <Segment stacked>\n            <Form.Input\n              name=\"userName\"\n              value={userState.userName}\n              icon=\"user\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"text\"\n              placeholder=\"Enter Username\"\n            />\n            <Form.Input\n              name=\"email\"\n              value={userState.email}\n              icon=\"mail\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"email\"\n              placeholder=\"Enter Email\"\n            />\n            <Form.Input\n              name=\"password\"\n              value={userState.password}\n              icon=\"lock\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"password\"\n              placeholder=\"Enter Password\"\n            />\n            <Form.Input\n              name=\"confirmpassword\"\n              value={userState.confirmpassword}\n              icon=\"lock\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n            />\n          </Segment>\n          <Button color=\"green\" disabled={isLoading} loading={isLoading}>\n            Submit\n          </Button>\n        </Form>\n        {errorState.length > 0 && (\n          <Message error>\n            <h3>Errors</h3>\n            {formaterrors()}\n          </Message>\n        )}\n        {isSuccess && (\n          <Message success>\n            <h3>Successfully Registered</h3>\n          </Message>\n        )}\n        <Message>\n          Already an User? <Link to=\"/login\">Login </Link>\n        </Message>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default Register;\n","import React, { useState } from \"react\";\nimport {\n  Grid,\n  Form,\n  Segment,\n  Header,\n  Icon,\n  Button,\n  Message,\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nimport firebase from \"../../../server/firebase\";\n\nimport \"../Auth.css\";\n\nconst Login = () => {\n  let user = {\n    email: \"\",\n    password: \"\",\n  };\n\n  let errors = [];\n\n  const [userState, setuserState] = useState(user);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorState, seterrorState] = useState(errors);\n\n  const handleInput = (event) => {\n    let target = event.target;\n    setuserState((currentState) => {\n      let currentuser = { ...currentState };\n      currentuser[target.name] = target.value;\n      return currentuser;\n    });\n  };\n\n  const checkForm = () => {\n    if (isFormEmpty()) {\n      seterrorState((error) =>\n        error.concat({ message: \"Please fill in all fields\" })\n      );\n      return false;\n    }\n    return true;\n  };\n\n  const isFormEmpty = () => {\n    return !userState.password.length || !userState.email.length;\n  };\n\n  const formaterrors = () => {\n    return errorState.map((error, index) => <p key={index}>{error.message}</p>);\n  };\n\n  const onSubmit = (event) => {\n    seterrorState(() => []);\n    if (checkForm()) {\n      setIsLoading(true);\n      firebase\n        .auth()\n        .signInWithEmailAndPassword(userState.email, userState.password)\n        .then((user) => {\n          setIsLoading(false);\n          console.log(user);\n        })\n        .catch((serverError) => {\n          setIsLoading(false);\n          seterrorState((error) => error.concat(serverError));\n        });\n    }\n  };\n\n  return (\n    <Grid verticalAlign=\"middle\" textAlign=\"center\" className=\"grid-form\">\n      <Grid.Column style={{ maxWidth: \"500px\" }}>\n        <Header icon as=\"h2\">\n          <Icon name=\"connectdevelop\" />\n          Login\n        </Header>\n        <Form onSubmit={onSubmit}>\n          <Segment stacked>\n            <Form.Input\n              name=\"email\"\n              value={userState.email}\n              icon=\"mail\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"email\"\n              placeholder=\"User Email\"\n            />\n            <Form.Input\n              name=\"password\"\n              value={userState.password}\n              icon=\"lock\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"password\"\n              placeholder=\"User Password\"\n            />\n          </Segment>\n          <Button color=\"blue\" disabled={isLoading} loading={isLoading}>\n            Login\n          </Button>\n        </Form>\n        {errorState.length > 0 && (\n          <Message error>\n            <h3>Errors</h3>\n            {formaterrors()}\n          </Message>\n        )}\n        <Message>\n          Not an User? <Link to=\"/register\">Sign Up </Link>\n        </Message>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default Login;\n","import { SET_USER, SET_CHANNEL, SET_FAVOURITECHANNEL, REMOVE_FAVOURITECHANNEL } from './actiontypes';\nimport { combineReducers } from \"redux\";\n\nlet defaultUserState = {\n    currentUser: null\n}\n\nconst userReducer = (state = defaultUserState, action) => {\n    if (action.type === SET_USER) {\n        let payload = action.payload;\n        state = { ...payload };\n        return state;\n    }\n    return state;\n}\n\nlet defaultChannelState = {\n    currentChannel: null,\n    loading : true\n}\n\n\nconst channelReducer = (state = defaultChannelState, action) => {\n    if (action.type === SET_CHANNEL) {\n        let payload = action.payload;\n        state = { ...payload };\n        state.loading= false;\n        return state;\n    }\n    return state;\n}\n\nlet defaultFavouriteChannelState = {\n    favouriteChannel: {}\n}\n\n\nconst favouriteChannelReducer = (state = defaultFavouriteChannelState, action) => {\n    if (action.type === SET_FAVOURITECHANNEL) {\n        let payload = action.payload.favouriteChannel;\n        let updatedState = { ...state.favouriteChannel };\n        updatedState[payload.channelId] = payload.channelName;\n        return { favouriteChannel: updatedState };\n    } else if (action.type === REMOVE_FAVOURITECHANNEL) {\n        let payload = action.payload.favouriteChannel;\n        let updatedState = { ...state.favouriteChannel };\n        delete updatedState[payload.channelId];\n        return { favouriteChannel: updatedState };\n    }\n    return state;\n}\n\nexport const combinedReducers = combineReducers({ user: userReducer, channel: channelReducer ,favouriteChannel : favouriteChannelReducer  })","import React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  withRouter,\n} from \"react-router-dom\";\nimport { Provider, connect } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport Register from \"./components/Auth/Register/Register.component\";\nimport Login from \"./components/Auth/Login/Login.component\";\nimport firebase from \"./server/firebase\";\nimport { combinedReducers } from \"./store/reducer\";\nimport { setUser } from \"./store/actioncreator\";\n//import { AppLoader } from \"./components/AppLoader/AppLoader.component\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n\nconst store = createStore(combinedReducers);\n\nconst Index = (props) => {\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        props.setUser(user);\n        props.history.push(\"/\");\n      } else {\n        props.setUser(null);\n        props.history.push(\"/login\");\n      }\n    });\n  }, []);\n\n  console.log(\"Debug\", props.currentUser);\n\n  return (\n    <>\n      <Switch>\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/\" component={App} />\n      </Switch>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.user.currentUser,\n    loading: state.channel.loading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setUser: (user) => {\n      dispatch(setUser(user));\n    },\n  };\n};\n\nconst IndexWithRouter = withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Index)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <IndexWithRouter />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}